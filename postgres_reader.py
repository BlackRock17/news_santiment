"""
PostgreSQL Database Reader –∑–∞ AI –ê–Ω–∞–ª–∏–∑ –ü—Ä–æ–µ–∫—Ç–∞
–ß–µ—Ç–µ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏ –æ—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω–∏ "crypto_news"
"""

import psycopg2
import psycopg2.extras
from datetime import datetime


class PostgreSQLReader:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞ –≤—Ä—ä–∑–∫–∞ –∫—ä–º PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω–∏ "crypto_news"
        –ò–∑–ø–æ–ª–∑–≤–∞ —Å—ä—â–∏—Ç–µ credentials –∫–∞—Ç–æ scraping –ø—Ä–æ–µ–∫—Ç–∞
        """
        print("üîó –°–≤—ä—Ä–∑–≤–∞–Ω–µ –∫—ä–º PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω–∏ –∑–∞ —á–µ—Ç–µ–Ω–µ...")

        # –°—ä—â–∏—Ç–µ credentials –∫–∞—Ç–æ –≤ scraping –ø—Ä–æ–µ–∫—Ç–∞
        self.db_config = {
            'host': 'localhost',
            'port': 5432,
            'database': 'crypto_news',  # –°—ä—â–∞—Ç–∞ –±–∞–∑–∞ –∫–∞—Ç–æ scraper-–∞
            'user': 'crypto_user',
            'password': 'password'
        }

        # –¢–µ—Å—Ç–≤–∞–º–µ –≤—Ä—ä–∑–∫–∞—Ç–∞ –≤–µ–¥–Ω–∞–≥–∞
        self._test_connection()
        print("‚úÖ PostgreSQL Reader –≥–æ—Ç–æ–≤!")

    def _test_connection(self):
        """
        –¢–µ—Å—Ç–≤–∞ –¥–∞–ª–∏ –º–æ–∂–µ –¥–∞ —Å–µ —Å–≤—ä—Ä–∂–µ —Å –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
        –•–≤—ä—Ä–ª—è –≥—Ä–µ—à–∫–∞ –∞–∫–æ –Ω—è–º–∞ –≤—Ä—ä–∑–∫–∞
        """
        try:
            # –û—Ç–≤–∞—Ä—è–º–µ —Ç–µ—Å—Ç –≤—Ä—ä–∑–∫–∞
            conn = psycopg2.connect(**self.db_config)

            # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ 'articles' —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT COUNT(*) 
                    FROM information_schema.tables 
                    WHERE table_name = 'articles'
                """)
                table_exists = cursor.fetchone()[0] > 0

                if not table_exists:
                    raise Exception("–¢–∞–±–ª–∏—Ü–∞—Ç–∞ 'articles' –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏")

            conn.close()
            print("‚úÖ –í—Ä—ä–∑–∫–∞ —Å PostgreSQL —É—Å–ø–µ—à–Ω–∞")
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'articles' –Ω–∞–º–µ—Ä–µ–Ω–∞")

        except psycopg2.Error as e:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ —Å PostgreSQL: {e}")
            raise
        except Exception as e:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞: {e}")
            raise

    def get_connection(self):
        """
        –í—Ä—ä—â–∞ –Ω–æ–≤–∞ –≤—Ä—ä–∑–∫–∞ –∫—ä–º –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
        –ò–∑–ø–æ–ª–∑–≤–∞–π –≥–æ –≤ with statement: with reader.get_connection() as conn:
        """
        return psycopg2.connect(**self.db_config)

    def get_database_stats(self):
        """
        –ü–æ–∫–∞–∑–≤–∞ –æ—Å–Ω–æ–≤–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
        –ü–æ–ª–µ–∑–Ω–æ –∑–∞ debugging –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ä–∞–Ω–µ
        """
        try:
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    # –û–±—â –±—Ä–æ–π —Å—Ç–∞—Ç–∏–∏
                    cursor.execute("SELECT COUNT(*) FROM articles")
                    total_articles = cursor.fetchone()[0]

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏
                    cursor.execute("SELECT COUNT(*) FROM articles WHERE is_analyzed = TRUE")
                    analyzed_articles = cursor.fetchone()[0]

                    # –ù–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏
                    cursor.execute("SELECT COUNT(*) FROM articles WHERE is_analyzed = FALSE")
                    unanalyzed_articles = cursor.fetchone()[0]

                    # –ù–∞–π-–Ω–æ–≤–∞ —Å—Ç–∞—Ç–∏—è
                    cursor.execute("""
                        SELECT title, scraped_at 
                        FROM articles 
                        ORDER BY scraped_at DESC 
                        LIMIT 1
                    """)
                    latest_article = cursor.fetchone()

                    return {
                        'total_articles': total_articles,
                        'analyzed_articles': analyzed_articles,
                        'unanalyzed_articles': unanalyzed_articles,
                        'latest_article': latest_article
                    }

        except psycopg2.Error as e:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None

    def get_unanalyzed_articles(self, limit=10):
        """
        –í—Ä—ä—â–∞ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏ –æ—Ç –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏

        Args:
            limit (int): –ú–∞–∫—Å–∏–º–∞–ª–µ–Ω –±—Ä–æ–π —Å—Ç–∞—Ç–∏–∏ –∑–∞ –≤—Ä—ä—â–∞–Ω–µ (default: 10)

        Returns:
            list: –°–ø–∏—Å—ä–∫ —Å—ä—Å —Å—Ç–∞—Ç–∏–∏ –≤ dict —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –ø—Ä–∞–∑–µ–Ω —Å–ø–∏—Å—ä–∫
        """
        print(f"üìã –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏ (–ª–∏–º–∏—Ç: {limit})...")

        try:
            with self.get_connection() as conn:
                with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
                    # SQL –∑–∞—è–≤–∫–∞ –∑–∞ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏
                    cursor.execute("""
                        SELECT id, url, title, content, author, published_date, 
                               content_length, scraped_at
                        FROM articles 
                        WHERE is_analyzed = FALSE 
                        ORDER BY scraped_at DESC 
                        LIMIT %s
                    """, (limit,))

                    # –ü—Ä–µ–≤—Ä—ä—â–∞–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –≤ list of dictionaries
                    articles = cursor.fetchall()

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–º–µ –≤ –æ–±–∏–∫–Ω–æ–≤–µ–Ω–∏ dict-–æ–≤–µ (–ø–æ-–ª–µ—Å–Ω–æ –∑–∞ —Ä–∞–±–æ—Ç–∞)
                    result = []
                    for article in articles:
                        result.append({
                            'id': article['id'],
                            'url': article['url'],
                            'title': article['title'],
                            'content': article['content'],
                            'author': article['author'],
                            'published_date': article['published_date'],
                            'content_length': article['content_length'],
                            'scraped_at': article['scraped_at']
                        })

                    print(f"‚úÖ –ù–∞–º–µ—Ä–µ–Ω–∏ {len(result)} –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏")
                    return result

        except psycopg2.Error as e:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–µ—Ç–µ–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏–∏: {e}")
            return []
        except Exception as e:
            print(f"‚ùå –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
            return []

    def mark_article_as_analyzed(self, article_id, analysis_summary=None):
        """
        –ú–∞—Ä–∫–∏—Ä–∞ —Å—Ç–∞—Ç–∏—è –∫–∞—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∞ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏

        Args:
            article_id (int): ID –Ω–∞ —Å—Ç–∞—Ç–∏—è—Ç–∞ –∑–∞ –º–∞—Ä–∫–∏—Ä–∞–Ω–µ
            analysis_summary (str, optional): –ö—Ä–∞—Ç–∫–æ —Ä–µ–∑—é–º–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            bool: True –∞–∫–æ —É—Å–ø–µ—à–Ω–æ, False –∞–∫–æ –∏–º–∞ –≥—Ä–µ—à–∫–∞
        """
        print(f"‚úÖ –ú–∞—Ä–∫–∏—Ä–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—è ID:{article_id} –∫–∞—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∞...")

        try:
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    # –ü—ä—Ä–≤–æ –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Å—Ç–∞—Ç–∏—è—Ç–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
                    cursor.execute("SELECT title FROM articles WHERE id = %s", (article_id,))
                    article = cursor.fetchone()

                    if not article:
                        print(f"‚ùå –°—Ç–∞—Ç–∏—è —Å ID:{article_id} –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞")
                        return False

                    # UPDATE –∑–∞—è–≤–∫–∞ –∑–∞ –º–∞—Ä–∫–∏—Ä–∞–Ω–µ –∫–∞—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∞
                    cursor.execute("""
                        UPDATE articles 
                        SET is_analyzed = TRUE
                        WHERE id = %s
                    """, (article_id,))

                    # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ UPDATE-–∞ –µ —É—Å–ø–µ—à–µ–Ω
                    if cursor.rowcount == 1:
                        conn.commit()  # –ó–∞–ø–∞–∑–≤–∞–º–µ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ
                        print(f"‚úÖ –°—Ç–∞—Ç–∏—è ID:{article_id} –º–∞—Ä–∫–∏—Ä–∞–Ω–∞ –∫–∞—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∞")
                        return True
                    else:
                        print(f"‚ö†Ô∏è –°—Ç–∞—Ç–∏—è ID:{article_id} –Ω–µ –±–µ—à–µ –æ–±–Ω–æ–≤–µ–Ω–∞")
                        return False

        except psycopg2.Error as e:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –º–∞—Ä–∫–∏—Ä–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—è: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
            return False

    def test_database_access(self):
        """
        –¢–µ—Å—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–∫–∞–∑–≤–∞ –Ω—è–∫–æ–ª–∫–æ —Å—Ç–∞—Ç–∏–∏ –æ—Ç –±–∞–∑–∞—Ç–∞
        –ü–æ–ª–µ–∑–Ω–æ –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ –≤—Å–∏—á–∫–æ —Ä–∞–±–æ—Ç–∏ –ø—Ä–∞–≤–∏–ª–Ω–æ
        """
        print("\nüß™ –¢–ï–°–¢ –ù–ê DATABASE ACCESS")
        print("=" * 40)

        try:
            # –ü–æ–∫–∞–∑–≤–∞–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = self.get_database_stats()
            if stats:
                print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
                print(f"   üì∞ –û–±—â–æ —Å—Ç–∞—Ç–∏–∏: {stats['total_articles']}")
                print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏: {stats['analyzed_articles']}")
                print(f"   ‚è≥ –ù–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏: {stats['unanalyzed_articles']}")

                if stats['latest_article']:
                    title, date = stats['latest_article']
                    print(f"   üìÖ –ù–∞–π-–Ω–æ–≤–∞: {title[:50]}... ({date})")

            # –ü–æ–∫–∞–∑–≤–∞–º–µ –ø—ä—Ä–≤–∏—Ç–µ 3 –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏
            with self.get_connection() as conn:
                with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
                    cursor.execute("""
                        SELECT id, title, content_length, scraped_at, url
                        FROM articles 
                        WHERE is_analyzed = FALSE 
                        ORDER BY scraped_at DESC 
                        LIMIT 3
                    """)

                    unanalyzed = cursor.fetchall()

                    if unanalyzed:
                        print(f"\nüìã –ü—ä—Ä–≤–∏ 3 –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏:")
                        for i, article in enumerate(unanalyzed, 1):
                            print(f"   {i}. ID:{article['id']} | {article['title'][:45]}...")
                            print(f"      üìä {article['content_length']} chars | {article['scraped_at']}")
                    else:
                        print("\nüìã –ù—è–º–∞ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏")

            print("\n‚úÖ Database —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!")
            return True

        except Exception as e:
            print(f"\n‚ùå Database —Ç–µ—Å—Ç –Ω–µ—É—Å–ø–µ—à–µ–Ω: {e}")
            return False

    def test_full_workflow(self):
        """
        –¢–µ—Å—Ç–≤–∞ –ø—ä–ª–Ω–∏—è workflow: —á–µ—Ç–µ–Ω–µ -> "–∞–Ω–∞–ª–∏–∑" -> –º–∞—Ä–∫–∏—Ä–∞–Ω–µ
        –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–≤–∞ –µ —Å–∞–º–æ —Ç–µ—Å—Ç, –Ω–µ –ø—Ä–∞–≤–∏ –∏—Å—Ç–∏–Ω—Å–∫–∏ –∞–Ω–∞–ª–∏–∑!
        """
        print("\nüîÑ –¢–ï–°–¢ –ù–ê –ü–™–õ–ï–ù WORKFLOW")
        print("=" * 40)

        try:
            # –°—Ç—ä–ø–∫–∞ 1: –í–∑–µ–º–∞–º–µ 1 –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∞ —Å—Ç–∞—Ç–∏—è
            articles = self.get_unanalyzed_articles(limit=1)

            if not articles:
                print("üìã –ù—è–º–∞ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏ –∑–∞ —Ç–µ—Å—Ç")
                return False

            article = articles[0]
            print(f"\nüìÑ –ò–∑–±—Ä–∞–Ω–∞ —Å—Ç–∞—Ç–∏—è –∑–∞ —Ç–µ—Å—Ç:")
            print(f"   ID: {article['id']}")
            print(f"   –ó–∞–≥–ª–∞–≤–∏–µ: {article['title'][:60]}...")
            print(f"   –î—ä–ª–∂–∏–Ω–∞: {article['content_length']} —Å–∏–º–≤–æ–ª–∞")

            # –°—Ç—ä–ø–∫–∞ 2: "–°–∏–º—É–ª–∏—Ä–∞–º–µ" –∞–Ω–∞–ª–∏–∑ (–±–µ–∑ –¥–∞ –ø—Ä–∞–≤–∏–º –∏—Å—Ç–∏–Ω—Å–∫–∏ –∞–Ω–∞–ª–∏–∑)
            print(f"\nü§ñ –°–∏–º—É–ª–∏—Ä–∞–Ω–µ –Ω–∞ AI –∞–Ω–∞–ª–∏–∑...")
            print(f"   üìù –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ...")
            print(f"   üîç –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ entities...")
            print(f"   üìä –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ sentiment...")

            # –°—Ç—ä–ø–∫–∞ 3: –ú–∞—Ä–∫–∏—Ä–∞–º–µ –∫–∞—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∞
            success = self.mark_article_as_analyzed(article['id'])

            if success:
                # –°—Ç—ä–ø–∫–∞ 4: –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –Ω–∞–∏—Å—Ç–∏–Ω–∞ –µ –º–∞—Ä–∫–∏—Ä–∞–Ω–∞
                updated_stats = self.get_database_stats()
                print(f"\nüìä –û–±–Ω–æ–≤–µ–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
                print(f"   ‚è≥ –ù–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏: {updated_stats['unanalyzed_articles']}")
                print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏: {updated_stats['analyzed_articles']}")

                print(f"\nüéâ –ü—ä–ª–µ–Ω workflow —Ç–µ—Å—Ç –£–°–ü–ï–®–ï–ù!")
                return True
            else:
                print(f"\n‚ùå –ü—ä–ª–µ–Ω workflow —Ç–µ—Å—Ç –ù–ï–£–°–ü–ï–®–ï–ù")
                return False

        except Exception as e:
            print(f"\n‚ùå –ì—Ä–µ—à–∫–∞ –≤ workflow —Ç–µ—Å—Ç: {e}")
            return False


# –¢–µ—Å—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ PostgreSQL Reader
    """
    print("=== POSTGRESQL READER –¢–ï–°–¢ ===")

    try:
        # –°—ä–∑–¥–∞–≤–∞–º–µ reader
        reader = PostgreSQLReader()

        # –û—Å–Ω–æ–≤–µ–Ω —Ç–µ—Å—Ç
        basic_success = reader.test_database_access()

        if not basic_success:
            print("\n‚ùå –û—Å–Ω–æ–≤–Ω–∏—è—Ç —Ç–µ—Å—Ç —Å–µ –ø—Ä–æ–≤–∞–ª–∏")
            return

        # –¢–µ—Å—Ç–≤–∞–º–µ –Ω–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥–∏
        print("\n" + "=" * 50)
        print("üß™ –¢–ï–°–¢–í–ê–ù–ï –ù–ê –ù–û–í–ò–¢–ï –ú–ï–¢–û–î–ò")
        print("=" * 50)

        # –¢–µ—Å—Ç 1: get_unanalyzed_articles()
        print("\n1Ô∏è‚É£ –¢–ï–°–¢: get_unanalyzed_articles()")
        articles = reader.get_unanalyzed_articles(limit=2)

        if articles:
            print(f"‚úÖ –ù–∞–º–µ—Ä–µ–Ω–∏ {len(articles)} –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏:")
            for i, article in enumerate(articles, 1):
                print(f"   {i}. ID:{article['id']} - {article['title'][:50]}...")
        else:
            print("üìã –ù—è–º–∞ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏")

        # –¢–µ—Å—Ç 2: –ü—ä–ª–µ–Ω workflow (—Å–∞–º–æ –∞–∫–æ –∏–º–∞ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏)
        if articles:
            print(f"\n2Ô∏è‚É£ –¢–ï–°–¢: –ü—ä–ª–µ–Ω workflow")
            workflow_success = reader.test_full_workflow()

            if workflow_success:
                print("\nüéâ –í—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ –£–°–ü–ï–®–ù–ò!")
                print("\nüí° PostgreSQL Reader –µ –≥–æ—Ç–æ–≤ –∑–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI –∞–Ω–∞–ª–∏–∑–∞!")
                print("\nüöÄ –°–ª–µ–¥–≤–∞—â–∏ —Å—Ç—ä–ø–∫–∏:")
                print("   1. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å crypto_analyzer.py")
                print("   2. –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ analysis workflow")
                print("   3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω–∏ '–ë' –∑–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏")
            else:
                print("\n‚ùå Workflow —Ç–µ—Å—Ç –Ω–µ—É—Å–ø–µ—à–µ–Ω")
        else:
            print(f"\n‚è≠Ô∏è –ü—Ä–µ—Å–∫–∞—á–∞–º workflow —Ç–µ—Å—Ç (–Ω—è–º–∞ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏)")
            print("\nüí° –ó–∞ –¥–∞ —Ç–µ—Å—Ç–≤–∞—à workflow:")
            print("   1. –î–æ–±–∞–≤–∏ –Ω–æ–≤–∏ —Å—Ç–∞—Ç–∏–∏ —Å—ä—Å scraper-–∞")
            print("   2. –°—Ç–∞—Ä—Ç–∏—Ä–∞–π –æ—Ç–Ω–æ–≤–æ postgres_reader.py")

    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
        print("\nüîß –í—ä–∑–º–æ–∂–Ω–∏ —Ä–µ—à–µ–Ω–∏—è:")
        print("   1. –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ PostgreSQL —Å—ä—Ä–≤—ä—Ä—ä—Ç —Ä–∞–±–æ—Ç–∏")
        print("   2. –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ 'crypto_news' —Å—ä—â–µ—Å—Ç–≤—É–≤–∞")
        print("   3. –ü—Ä–æ–≤–µ—Ä–∏ username/password credentials")


if __name__ == "__main__":
    main()
