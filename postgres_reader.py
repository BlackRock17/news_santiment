"""
PostgreSQL Database Reader –∑–∞ AI –ê–Ω–∞–ª–∏–∑ –ü—Ä–æ–µ–∫—Ç–∞
–ß–µ—Ç–µ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏ –æ—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω–∏ "crypto_news"
"""

import psycopg2
import psycopg2.extras
from datetime import datetime


class PostgreSQLReader:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞ –≤—Ä—ä–∑–∫–∞ –∫—ä–º PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω–∏ "crypto_news"
        –ò–∑–ø–æ–ª–∑–≤–∞ —Å—ä—â–∏—Ç–µ credentials –∫–∞—Ç–æ scraping –ø—Ä–æ–µ–∫—Ç–∞
        """
        print("üîó –°–≤—ä—Ä–∑–≤–∞–Ω–µ –∫—ä–º PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω–∏ –∑–∞ —á–µ—Ç–µ–Ω–µ...")

        # –°—ä—â–∏—Ç–µ credentials –∫–∞—Ç–æ –≤ scraping –ø—Ä–æ–µ–∫—Ç–∞
        self.db_config = {
            'host': 'localhost',
            'port': 5432,
            'database': 'crypto_news',  # –°—ä—â–∞—Ç–∞ –±–∞–∑–∞ –∫–∞—Ç–æ scraper-–∞
            'user': 'crypto_user',
            'password': 'password'
        }

        # –¢–µ—Å—Ç–≤–∞–º–µ –≤—Ä—ä–∑–∫–∞—Ç–∞ –≤–µ–¥–Ω–∞–≥–∞
        self._test_connection()
        print("‚úÖ PostgreSQL Reader –≥–æ—Ç–æ–≤!")

    def _test_connection(self):
        """
        –¢–µ—Å—Ç–≤–∞ –¥–∞–ª–∏ –º–æ–∂–µ –¥–∞ —Å–µ —Å–≤—ä—Ä–∂–µ —Å –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
        –•–≤—ä—Ä–ª—è –≥—Ä–µ—à–∫–∞ –∞–∫–æ –Ω—è–º–∞ –≤—Ä—ä–∑–∫–∞
        """
        try:
            # –û—Ç–≤–∞—Ä—è–º–µ —Ç–µ—Å—Ç –≤—Ä—ä–∑–∫–∞
            conn = psycopg2.connect(**self.db_config)

            # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ 'articles' —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT COUNT(*) 
                    FROM information_schema.tables 
                    WHERE table_name = 'articles'
                """)
                table_exists = cursor.fetchone()[0] > 0

                if not table_exists:
                    raise Exception("–¢–∞–±–ª–∏—Ü–∞—Ç–∞ 'articles' –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏")

            conn.close()
            print("‚úÖ –í—Ä—ä–∑–∫–∞ —Å PostgreSQL —É—Å–ø–µ—à–Ω–∞")
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'articles' –Ω–∞–º–µ—Ä–µ–Ω–∞")

        except psycopg2.Error as e:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ —Å PostgreSQL: {e}")
            raise
        except Exception as e:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞: {e}")
            raise

    def get_connection(self):
        """
        –í—Ä—ä—â–∞ –Ω–æ–≤–∞ –≤—Ä—ä–∑–∫–∞ –∫—ä–º –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
        –ò–∑–ø–æ–ª–∑–≤–∞–π –≥–æ –≤ with statement: with reader.get_connection() as conn:
        """
        return psycopg2.connect(**self.db_config)

    def get_database_stats(self):
        """
        –ü–æ–∫–∞–∑–≤–∞ –æ—Å–Ω–æ–≤–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
        –ü–æ–ª–µ–∑–Ω–æ –∑–∞ debugging –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ä–∞–Ω–µ
        """
        try:
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    # –û–±—â –±—Ä–æ–π —Å—Ç–∞—Ç–∏–∏
                    cursor.execute("SELECT COUNT(*) FROM articles")
                    total_articles = cursor.fetchone()[0]

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏
                    cursor.execute("SELECT COUNT(*) FROM articles WHERE is_analyzed = TRUE")
                    analyzed_articles = cursor.fetchone()[0]

                    # –ù–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏
                    cursor.execute("SELECT COUNT(*) FROM articles WHERE is_analyzed = FALSE")
                    unanalyzed_articles = cursor.fetchone()[0]

                    # –ù–∞–π-–Ω–æ–≤–∞ —Å—Ç–∞—Ç–∏—è
                    cursor.execute("""
                        SELECT title, scraped_at 
                        FROM articles 
                        ORDER BY scraped_at DESC 
                        LIMIT 1
                    """)
                    latest_article = cursor.fetchone()

                    return {
                        'total_articles': total_articles,
                        'analyzed_articles': analyzed_articles,
                        'unanalyzed_articles': unanalyzed_articles,
                        'latest_article': latest_article
                    }

        except psycopg2.Error as e:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None

    def test_database_access(self):
        """
        –¢–µ—Å—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–∫–∞–∑–≤–∞ –Ω—è–∫–æ–ª–∫–æ —Å—Ç–∞—Ç–∏–∏ –æ—Ç –±–∞–∑–∞—Ç–∞
        –ü–æ–ª–µ–∑–Ω–æ –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ –≤—Å–∏—á–∫–æ —Ä–∞–±–æ—Ç–∏ –ø—Ä–∞–≤–∏–ª–Ω–æ
        """
        print("\nüß™ –¢–ï–°–¢ –ù–ê DATABASE ACCESS")
        print("=" * 40)

        try:
            # –ü–æ–∫–∞–∑–≤–∞–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = self.get_database_stats()
            if stats:
                print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
                print(f"   üì∞ –û–±—â–æ —Å—Ç–∞—Ç–∏–∏: {stats['total_articles']}")
                print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏: {stats['analyzed_articles']}")
                print(f"   ‚è≥ –ù–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏: {stats['unanalyzed_articles']}")

                if stats['latest_article']:
                    title, date = stats['latest_article']
                    print(f"   üìÖ –ù–∞–π-–Ω–æ–≤–∞: {title[:50]}... ({date})")

            # –ü–æ–∫–∞–∑–≤–∞–º–µ –ø—ä—Ä–≤–∏—Ç–µ 3 –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏
            with self.get_connection() as conn:
                with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
                    cursor.execute("""
                        SELECT id, title, content_length, scraped_at, url
                        FROM articles 
                        WHERE is_analyzed = FALSE 
                        ORDER BY scraped_at DESC 
                        LIMIT 3
                    """)

                    unanalyzed = cursor.fetchall()

                    if unanalyzed:
                        print(f"\nüìã –ü—ä—Ä–≤–∏ 3 –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏:")
                        for i, article in enumerate(unanalyzed, 1):
                            print(f"   {i}. ID:{article['id']} | {article['title'][:45]}...")
                            print(f"      üìä {article['content_length']} chars | {article['scraped_at']}")
                    else:
                        print("\nüìã –ù—è–º–∞ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏")

            print("\n‚úÖ Database —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!")
            return True

        except Exception as e:
            print(f"\n‚ùå Database —Ç–µ—Å—Ç –Ω–µ—É—Å–ø–µ—à–µ–Ω: {e}")
            return False


# –¢–µ—Å—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ PostgreSQL Reader
    """
    print("=== POSTGRESQL READER –¢–ï–°–¢ ===")

    try:
        # –°—ä–∑–¥–∞–≤–∞–º–µ reader
        reader = PostgreSQLReader()

        # –¢–µ—Å—Ç–≤–∞–º–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞
        success = reader.test_database_access()

        if success:
            print("\nüéâ PostgreSQL Reader —Ä–∞–±–æ—Ç–∏ –æ—Ç–ª–∏—á–Ω–æ!")
            print("\nüí° –°–ª–µ–¥–≤–∞—â–∏ —Å—Ç—ä–ø–∫–∏:")
            print("   1. –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –º–µ—Ç–æ–¥ get_unanalyzed_articles()")
            print("   2. –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –º–µ—Ç–æ–¥ mark_article_as_analyzed()")
        else:
            print("\n‚ùå –ò–º–∞ –ø—Ä–æ–±–ª–µ–º–∏ —Å PostgreSQL Reader")

    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
        print("\nüîß –í—ä–∑–º–æ–∂–Ω–∏ —Ä–µ—à–µ–Ω–∏—è:")
        print("   1. –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ PostgreSQL —Å—ä—Ä–≤—ä—Ä—ä—Ç —Ä–∞–±–æ—Ç–∏")
        print("   2. –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ 'crypto_news' —Å—ä—â–µ—Å—Ç–≤—É–≤–∞")
        print("   3. –ü—Ä–æ–≤–µ—Ä–∏ username/password credentials")


if __name__ == "__main__":
    main()
