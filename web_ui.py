"""
Simplified AI Analysis Web UI - –°–∞–º–æ –∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–Ω–æ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ
–ë–µ–∑ threading, –±–µ–∑ real-time updates, —Å–∞–º–æ –ø—Ä–æ—Å—Ç–∏ sync –æ–ø–µ—Ä–∞—Ü–∏–∏
"""

from flask import Flask, render_template, request, redirect, url_for, flash
import os
from datetime import datetime

# Import –Ω–∞ AI –º–æ–¥—É–ª–∏—Ç–µ
from postgres_reader import PostgreSQLReader
from analysis_workflow import AnalysisWorkflow

app = Flask(__name__)
app.secret_key = 'your-secret-key-change-this'

# –ï–¥–Ω–∞ global database connection (reuse –∑–∞ –≤—Å–∏—á–∫–∏ –∑–∞—è–≤–∫–∏)
db_reader = PostgreSQLReader()


@app.route('/')
def dashboard():
    """–ì–ª–∞–≤–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - Dashboard"""
    try:
        # –í–∑–µ–º–∞–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
        stats = db_reader.get_database_stats()

        # –ü–æ–∫–∞–∑–≤–∞–º–µ –ø—ä—Ä–≤–∏—Ç–µ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏
        unanalyzed_preview = []
        if stats and stats['unanalyzed_articles'] > 0:
            unanalyzed_preview = db_reader.get_unanalyzed_articles(limit=5)

        return render_template('dashboard.html',
                               stats=stats,
                               unanalyzed_preview=unanalyzed_preview)

    except Exception as e:
        flash(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ dashboard: {str(e)}", 'error')
        return render_template('error.html', error=str(e))


@app.route('/analysis')
def analysis_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        stats = db_reader.get_database_stats()

        # –í–∑–µ–º–∞–º–µ —Å–ø–∏—Å—ä–∫ —Å –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏
        unanalyzed_articles = []
        if stats and stats['unanalyzed_articles'] > 0:
            unanalyzed_articles = db_reader.get_unanalyzed_articles(limit=20)

        return render_template('analysis.html',
                               stats=stats,
                               unanalyzed_articles=unanalyzed_articles)

    except Exception as e:
        flash(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞: {str(e)}", 'error')
        return redirect(url_for('dashboard'))


@app.route('/start_analysis', methods=['POST'])
def start_analysis():
    """–°—Ç–∞—Ä—Ç–∏—Ä–∞ loading —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑"""
    try:
        # –í–∑–µ–º–∞–º–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—Ç–µ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        limit = int(request.form.get('limit', 5))
        save_results = request.form.get('save_results') == 'on'

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if limit < 1 or limit > 50:
            flash('–õ–∏–º–∏—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –º–µ–∂–¥—É 1 –∏ 50 —Å—Ç–∞—Ç–∏–∏.', 'error')
            return redirect(url_for('analysis_page'))

        # –ü–æ–∫–∞–∑–≤–∞–º–µ loading —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        return render_template('analysis_loading.html',
                               limit=limit,
                               save_results=save_results)

    except Exception as e:
        flash(f'–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑: {str(e)}', 'error')
        return redirect(url_for('analysis_page'))


@app.route('/run_analysis/<int:limit>/<save_results>')
def run_analysis(limit, save_results):
    """–ü—Ä–∞–≤–∏ SYNC –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–Ω–∞—Å–æ—á–≤–∞ –∫—ä–º —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ"""
    try:
        print(f"üöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ SYNC –∞–Ω–∞–ª–∏–∑ –∑–∞ {limit} —Å—Ç–∞—Ç–∏–∏...")

        # –°—ä–∑–¥–∞–≤–∞–º–µ workflow –∏ –ø—Ä–∞–≤–∏–º –∞–Ω–∞–ª–∏–∑ (SYNC - –±–µ–∑ threading)
        workflow = AnalysisWorkflow()
        results = workflow.process_unanalyzed_articles(
            limit=limit,
            save_results=(save_results == 'true')
        )

        # –°–ª–µ–¥ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ –ø–æ–∫–∞–∑–≤–∞–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
        success_msg = f'–ê–Ω–∞–ª–∏–∑ –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ! {results["successful_analyses"]} —Å—Ç–∞—Ç–∏–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –∑–∞ {results["processing_time"]:.1f} —Å–µ–∫—É–Ω–¥–∏.'
        flash(success_msg, 'success')

        return redirect(url_for('results_page'))

    except Exception as e:
        flash(f'–ì—Ä–µ—à–∫–∞ –ø–æ –≤—Ä–µ–º–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}', 'error')
        return redirect(url_for('analysis_page'))


@app.route('/results')
def results_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞ –ø—Ä–µ–≥–ª–µ–¥ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –∞–Ω–∞–ª–∏–∑–∏"""
    try:
        # –¢—ä—Ä—Å–∏–º JSON —Ñ–∞–π–ª–æ–≤–µ —Å —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
        result_files = []
        for filename in os.listdir('.'):
            if filename.startswith('analysis_results_') and filename.endswith('.json'):
                try:
                    # –í–∑–µ–º–∞–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Ñ–∞–π–ª–∞
                    file_stats = os.stat(filename)
                    file_size = round(file_stats.st_size / 1024, 1)  # KB
                    modified_time = datetime.fromtimestamp(file_stats.st_mtime)

                    # –ß–µ—Ç–µ–º –ø—ä—Ä–≤–∏—Ç–µ –Ω—è–∫–æ–ª–∫–æ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –∑–∞ preview
                    import json
                    with open(filename, 'r', encoding='utf-8') as f:
                        data = json.load(f)

                    result_files.append({
                        'filename': filename,
                        'size_kb': file_size,
                        'modified': modified_time.strftime('%Y-%m-%d %H:%M:%S'),
                        'article_count': len(data) if isinstance(data, list) else 0,
                        'preview': data[:2] if isinstance(data, list) and len(data) > 0 else []
                    })

                except Exception:
                    continue

        # –°–æ—Ä—Ç–∏—Ä–∞–º–µ –ø–æ –¥–∞—Ç–∞ (–Ω–∞–π-–Ω–æ–≤–∏—Ç–µ –ø—ä—Ä–≤–æ)
        result_files.sort(key=lambda x: x['modified'], reverse=True)

        return render_template('results.html', result_files=result_files)

    except Exception as e:
        flash(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏: {str(e)}", 'error')
        return render_template('results.html', result_files=[])


@app.route('/view_result/<filename>')
def view_result(filename):
    """–ü–æ–∫–∞–∑–≤–∞ –¥–µ—Ç–∞–π–ª–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç —Ñ–∞–π–ª"""
    try:
        print(f"üîç Trying to view result file: {filename}")
        print(f"üìÇ Current directory files: {os.listdir('.')}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ filename –∑–∞ —Å–∏–≥—É—Ä–Ω–æ—Å—Ç
        if not filename.startswith('analysis_results_') or not filename.endswith('.json'):
            print(f"‚ùå Invalid filename format: {filename}")
            flash('–ù–µ–≤–∞–ª–∏–¥–µ–Ω —Ñ–∞–π–ª.', 'error')
            return redirect(url_for('results_page'))

        if not os.path.exists(filename):
            print(f"‚ùå File does not exist: {filename}")
            flash('–§–∞–π–ª—ä—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞.', 'error')
            return redirect(url_for('results_page'))

        print(f"‚úÖ File exists, reading: {filename}")

        # –ß–µ—Ç–µ–º –¥–∞–Ω–Ω–∏—Ç–µ
        import json
        with open(filename, 'r', encoding='utf-8') as f:
            results_data = json.load(f)

        print(f"‚úÖ JSON loaded successfully, data type: {type(results_data)}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_results = len(results_data) if isinstance(results_data, list) else 0
        print(f"üìä Total results: {total_results}")

        sentiment_stats = {}
        entity_stats = {}

        if isinstance(results_data, list):
            for result in results_data:
                # Sentiment —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                sentiment = result.get('sentiment', {}).get('label', 'unknown')
                sentiment_stats[sentiment] = sentiment_stats.get(sentiment, 0) + 1

                # Entity —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                entities = result.get('entities', {})
                for category, entity_list in entities.items():
                    if entity_list:
                        entity_stats[category] = entity_stats.get(category, 0) + len(entity_list)

        print(f"üìà Sentiment stats: {sentiment_stats}")
        print(f"üè∑Ô∏è Entity stats: {entity_stats}")
        print(f"‚úÖ Rendering view_result.html template")

        return render_template('view_result.html',
                               filename=filename,
                               results_data=results_data,
                               total_results=total_results,
                               sentiment_stats=sentiment_stats,
                               entity_stats=entity_stats)

    except Exception as e:
        print(f"‚ùå Error in view_result: {str(e)}")
        print(f"‚ùå Exception type: {type(e)}")
        flash(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–µ—Ç–µ–Ω–µ –Ω–∞ —Ñ–∞–π–ª: {str(e)}", 'error')
        return redirect(url_for('results_page'))


@app.route('/settings')
def settings_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        # –ü–æ–∫–∞–∑–≤–∞–º–µ —Ç–µ–∫—É—â–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        workflow = AnalysisWorkflow()

        settings_info = {
            'summarization_threshold': workflow.crypto_analyzer.text_summarizer.min_words_for_summary,
            'max_input_words': workflow.crypto_analyzer.text_summarizer.max_input_words,
            'target_summary_words': workflow.crypto_analyzer.text_summarizer.target_summary_words
        }

        return render_template('settings.html', settings=settings_info)

    except Exception as e:
        flash(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}", 'error')
        return redirect(url_for('dashboard'))


@app.route('/health')
def health_check():
    """Health check endpoint"""
    try:
        # –¢–µ—Å—Ç–≤–∞–º–µ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
        stats = db_reader.get_database_stats()

        return {
            'status': 'OK',
            'database_connection': 'OK' if stats else 'ERROR',
            'timestamp': datetime.now().isoformat()
        }

    except Exception as e:
        return {
            'status': 'ERROR',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }, 500


if __name__ == '__main__':
    print("üöÄ Simplified AI Analysis Web UI —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ...")
    print("üìä Dashboard: http://localhost:5002")
    print("ü§ñ Analysis Control: http://localhost:5002/analysis")
    print("üìà Results: http://localhost:5002/results")
    print("üí° Optimized for personal use - no threading, no real-time updates")
    print("=" * 50)

    # –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ
    app.run(debug=True, host='0.0.0.0', port=5002)
